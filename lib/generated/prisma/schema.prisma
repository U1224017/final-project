// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CUSTOMER
  STAFF
  CHEF
  OWNER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String? // ✨ 修改為可選，因為 OAuth 用戶沒有密碼
  role          Role           @default(CUSTOMER) // ✨ 新增預設值，例如 CUSTOMER
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  notifications Notification[]

  // NextAuth.js Prisma Adapter 需要以下關聯
  accounts Account[]
  sessions Session[]
}

// NextAuth.js Prisma Adapter 需要的 Account 和 Session 模型
// 請確保你的專案中有這些模型，通常它們會是這樣：
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model MenuItem {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id            String         @id @default(cuid())
  customer      User           @relation(fields: [customerId], references: [id])
  customerId    String
  status        OrderStatus    @default(PENDING)
  totalAmount   Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  items         OrderItem[]
  paymentStatus Boolean        @default(false)
  completedAt   DateTime?
  notifications Notification[]
}

model OrderItem {
  id             String   @id @default(cuid())
  order          Order    @relation(fields: [orderId], references: [id])
  orderId        String
  menuItem       MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId     String
  quantity       Int      @default(1)
  specialRequest String?
  createdAt      DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
